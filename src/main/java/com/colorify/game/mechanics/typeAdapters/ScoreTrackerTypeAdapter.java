package com.colorify.game.mechanics.typeAdapters;

import com.colorify.game.mechanics.scoreTracker.ColorifyScoreTracker;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.platform.core.game.Score;
import com.platform.core.game.ScoreTracker;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Generated by ChatGPT.
 */
public class ScoreTrackerTypeAdapter extends TypeAdapter<ScoreTracker> {

    @Override
    public ScoreTracker read(JsonReader reader) throws IOException {
        ScoreTracker scoreTracker = new ColorifyScoreTracker();
        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (name.equals("playerIdToScoreMap")) {
                scoreTracker.setPlayerIdToScoreMap( readPlayerIdToScoreMap(reader));
            } else if (name.equals("totalCells")) {
                scoreTracker.setTotalCells( reader.nextInt());
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        return scoreTracker;
    }

    private Map<String, Score> readPlayerIdToScoreMap(JsonReader reader) throws IOException {
        Map<String, Score> playerIdToScoreMap = new HashMap<>();
        reader.beginObject();
        while (reader.hasNext()) {
            String playerId = reader.nextName();
            Score score = readScore(reader);
            playerIdToScoreMap.put(playerId, score);
        }
        reader.endObject();
        return playerIdToScoreMap;
    }

    private Score readScore(JsonReader reader) throws IOException {
        Score score = new Score(0);
        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (name.equals("count")) {
                score.setCount( reader.nextInt());
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        return score;
    }

    @Override
    public void write(JsonWriter writer, ScoreTracker scoreTracker) throws IOException {
        writer.beginObject();
        writer.name("playerIdToScoreMap");
        writePlayerIdToScoreMap(writer, scoreTracker.getPlayerIdToScoreMap());
        writer.name("totalCells").value(scoreTracker.getTotalCells());
        writer.endObject();
    }

    private void writePlayerIdToScoreMap(JsonWriter writer, Map<String, Score> playerIdToScoreMap) throws IOException {
        writer.beginObject();
        for (Map.Entry<String, Score> entry : playerIdToScoreMap.entrySet()) {
            writer.name(entry.getKey());
            writeScore(writer, entry.getValue());
        }
        writer.endObject();
    }

    private void writeScore(JsonWriter writer, Score score) throws IOException {
        writer.beginObject();
        writer.name("count").value(score.getCount());
        writer.endObject();
    }
}